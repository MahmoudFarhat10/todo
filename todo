<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/boxicons@latest/css/boxicons.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="page.css">
    <title>TODO LIST</title>
    <link rel="icon" href="R.png">
</head>
<body>

    <div class="container">

        <h1>Todo Input</h1>
        <div class="todo-input">
            <span class="input-container">
                <i class="fa-solid fa-book"></i>
                <input type="text" id="todo-input" placeholder="New Todo">
            </span>            
            <div id="error-message" class="error-message"></div>
            <button onclick="addtask()">Add Task</button>
        </div>
        
        <h1>Todo List</h1>
        <div class="filters">
            
            <button onclick="filterTodos('all')">All</button>
            <button onclick="filterTodos('done')">Done</button>
            <button onclick="filterTodos('todo')">Todo</button>
        </div>
         <div class="tasks-area">
            <ul class="todo-list" id="todo-list"></ul>
         </div>


        <div class="footer-buttons">
            <button onclick="openDeleteDonePopup()">Delete done tasks</button>
            <button onclick="openDeleteAllPopup()">Delete all tasks</button>
        </div>
        <div id="delete-error-message" class="error-message"></div>
    </div>
    
    <!-- Edit Popup Modal -->
    <div class="popup" id="edit-popup">
        <div class="popup-content">
            <h2>Edit Task</h2>
            <input type="text" id="edit-input">
            <div id="edit-error-message" class="error-message"></div>
            <button class="save-btn" onclick="saveEdit()">Save</button>
            <button class="cancel-btn" onclick="closePopup()">Cancel</button>
        </div>
    </div>

    <!-- Delete Task Popup -->
    <div class="popup" id="delete-task-popup">
        <div class="popup-content">
            <h2>Are you sure?</h2>
            <p>This will delete the selected task.</p>
            <button class="confirm-btn" id="confirm-delete-btn">Yes, Delete</button>
            <button class="cancel-btn" onclick="closePopup()">Cancel</button>
        </div>
    </div>

    <!-- Delete Done Tasks Popup -->
    <div class="popup" id="delete-done-popup">
        <div class="popup-content">
            <h2>Are you sure?</h2>
            <p>This will delete all completed tasks.</p>
            <button class="confirm-btn" onclick="confirmDeleteDone()">Yes, Delete Done</button>
            <button class="cancel-btn" onclick="closePopup()">Cancel</button>
        </div>
    </div>

    <!-- Delete All Tasks Popup -->
    <div class="popup" id="delete-all-popup">
        <div class="popup-content">
            <h2>Are you sure?</h2>
            <p>This will delete all tasks.</p>
            <button class="confirm-btn" onclick="confirmDeleteAll()">Yes, Delete All</button>
            <button class="cancel-btn" onclick="closePopup()">Cancel</button>
        </div>
    </div>
<script>
   let todos = [];
   let editingIndex = null;
   let deletingIndex = null;
   const errorMessage2 = document.getElementById('delete-error-message');
/*=======save and load the page =======*/
        function saveTodos() {
            localStorage.setItem('todos', JSON.stringify(todos));
        }

        function loadTodos() {
            const storedTodos = localStorage.getItem('todos');
            if (storedTodos) {
                todos = JSON.parse(storedTodos);
                renderTodos();
            }
        }

        window.onload = loadTodos;
/*===================================*/
    function addtask() {
    const input = document.getElementById('todo-input');
    const errorMessage = document.getElementById('error-message');
    const task = input.value.trim();

    errorMessage.textContent = '';
    errorMessage2.textContent = '';

    if (task === '') {
    errorMessage.textContent = 'Task cannot be empty.';
    return;
    }
    if (!isNaN(task.charAt(0))) {
    errorMessage.textContent = 'Task cannot start with a number.';
    return;
    }
    if (task.length < 5) {
    errorMessage.textContent = 'Task must be at least 5 characters long.';
    return;
    }

    todos.push({ text: task, completed: false });
    input.value = '';
    saveTodos(); 
    renderTodos();


    }
    function renderTodos(filter = 'all') {
        const list = document.getElementById('todo-list');
        list.innerHTML = '';
        let filteredTodos = todos;

        if (filter === 'done') {
            filteredTodos = todos.filter(todo => todo.completed);
        } else if (filter === 'todo') {
            filteredTodos = todos.filter(todo => !todo.completed);
        }
  filteredTodos.forEach((todo, index) => {
            const listItem = document.createElement('li');
            listItem.className =` todo-item ${todo.completed ? 'completed' : ''}`;

            const taskSpan = document.createElement('span');
            taskSpan.textContent = todo.text;
const actionsDiv = document.createElement('div');
            actionsDiv.className = 'todo-actions';

  const completeCheckbox = document.createElement('input'); // Added checkbox for completion
            completeCheckbox.type = 'checkbox'; // Checkbox type
            completeCheckbox.checked = todo.completed; // Set checked state based on completion
            completeCheckbox.onclick = () => toggleComplete(index);


            const editButton = document.createElement('button');
            editButton.innerHTML = "<i class='bx bxs-pencil'></i>"; // Edit icon
            editButton.classList.add('edit-button'); // Add custom class for styling
            editButton.onclick = () => openEditPopup(index);

            const deleteButton = document.createElement('button');
            deleteButton.innerHTML = "<i class='bx bxs-trash-alt'></i>"; // Delete icon
            deleteButton.classList.add('delete-button'); // Add custom class for styling
            deleteButton.onclick = () => openDeleteTaskPopup(index);

 actionsDiv.appendChild(completeCheckbox);
            actionsDiv.appendChild(editButton);
            actionsDiv.appendChild(deleteButton);

            listItem.appendChild(taskSpan);
            listItem.appendChild(actionsDiv);

            list.appendChild(listItem);
            
        });
    }
 function toggleComplete(index) {
        todos[index].completed = !todos[index].completed;
        errorMessage2.textContent = '';
        saveTodos(); 
        renderTodos();
        
    }
function openEditPopup(index) {
        editingIndex = index;
        document.getElementById('edit-input').value = todos[index].text;
        document.getElementById('edit-popup').style.display = 'flex';
    }
 function saveEdit() {
    const editInput = document.getElementById('edit-input');
    const errorMessage = document.getElementById('edit-error-message');
    const task = editInput.value.trim();
 // Validate input when editing a task
    if (task === '') {
        errorMessage.textContent = 'Task cannot be empty.';
        return;
    }
    if (!isNaN(task.charAt(0))) {
        errorMessage.textContent = 'Task cannot start with a number.';
        return;
    }
    if (task.length < 5) {
        errorMessage.textContent = 'Task must be at least 5 characters long.';
        return;
    }
todos[editingIndex].text = task;
    saveTodos();
    closePopup();
    renderTodos();
    }
function openDeleteTaskPopup(index) {
        deletingIndex = index;
        document.getElementById('delete-task-popup').style.display = 'flex';
    }
    function deleteTask() {
        todos.splice(deletingIndex, 1);
        saveTodos();
        closePopup();
        renderTodos();
    }
 function openDeleteDonePopup() {
        const doneTasks = todos.filter(todo => todo.completed);
         errorMessage2.textContent = '';
        if (doneTasks.length === 0) {
            errorMessage2.textContent = 'No completed tasks to delete.';
            return;
        }
        document.getElementById('delete-done-popup').style.display = 'flex';
    }
  function confirmDeleteDone() {
        todos = todos.filter(todo => !todo.completed);
        saveTodos();
        renderTodos();
        closePopup();
    }

    function openDeleteAllPopup() {
        
        errorMessage2.textContent = '';
        if (todos.length === 0) {
            errorMessage2.textContent = 'No tasks to delete.';
            return;
        }
        document.getElementById('delete-all-popup').style.display = 'flex';
    }
   function confirmDeleteAll() {
        todos = [];
        saveTodos();
        renderTodos();
        closePopup();
    }
